package com.example.demo;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;
import java.util.Locale;

public class SearchRecipe extends JFrame {
    private JPanel recipeTitlePanel;
    private JLabel tittle;
    private JPanel recipeMainFrame;
    private JButton searchRecipeButton;
    private JTextField enterRecipe;
    private JList recipeList;

    public SearchRecipe() {
        super();
        this.setSize(800, 400);
        this.setBounds(300, 50, 900, 700);
        this.setContentPane(recipeMainFrame);
        this.setVisible(true);

        searchRecipeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String key_word = enterRecipe.getText();
                DefaultListModel model = new DefaultListModel();
//                model.addElement(key_word);
                String sqlQuery = "select name from recipe where name like '%" + key_word + "%'";
                try (Connection conn = DriverManager.getConnection("jdbc:oracle:thin:@ora4.ii.pw.edu.pl:1521/pdb1.ii.pw.edu.pl", "sfojt", "sfojt");
                     Statement stmt = conn.createStatement();
                     //ResultSet rs = stmt.executeQuery("Select name from recipe where name like '%\" + key_word + \"%'");) {
                     ResultSet rs = stmt.executeQuery(sqlQuery);) {
                    while (rs.next()) {
                        model.addElement(rs.getString(1));
                    }
                } catch (SQLException ex) {
                    throw new RuntimeException(ex);
                }
                recipeList.setModel(model);

            }
        });
        recipeList.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()){
                    JList source = (JList)e.getSource();
                    String selected = source.getSelectedValue().toString();
                    System.out.println(selected);
                    Recipe recipe = new Recipe(selected);
                    //recipe.recipeTitle.setText(selected);
                }
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        recipeMainFrame = new JPanel();
        recipeMainFrame.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(5, 21, new Insets(20, 20, 20, 20), -1, -1));
        recipeMainFrame.setBackground(new Color(-15946596));
        recipeTitlePanel = new JPanel();
        recipeTitlePanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        recipeTitlePanel.setBackground(new Color(-5570596));
        recipeMainFrame.add(recipeTitlePanel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 21, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, 1, null, null, null, 0, false));
        tittle = new JLabel();
        tittle.setEnabled(true);
        Font tittleFont = this.$$$getFont$$$("Broadway", -1, 36, tittle.getFont());
        if (tittleFont != null) tittle.setFont(tittleFont);
        tittle.setForeground(new Color(-15946596));
        tittle.setHorizontalAlignment(0);
        tittle.setHorizontalTextPosition(0);
        tittle.setText("Search recipe");
        recipeTitlePanel.add(tittle, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        recipeMainFrame.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 21, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, 1, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer2 = new com.intellij.uiDesigner.core.Spacer();
        recipeMainFrame.add(spacer2, new com.intellij.uiDesigner.core.GridConstraints(4, 20, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer3 = new com.intellij.uiDesigner.core.Spacer();
        recipeMainFrame.add(spacer3, new com.intellij.uiDesigner.core.GridConstraints(2, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        recipeList = new JList();
        recipeList.setBackground(new Color(-5570596));
        recipeList.setDoubleBuffered(true);
        Font recipeListFont = this.$$$getFont$$$("Goudy Old Style", Font.BOLD, 26, recipeList.getFont());
        if (recipeListFont != null) recipeList.setFont(recipeListFont);
        recipeList.setForeground(new Color(-16100280));
        recipeList.setSelectionBackground(new Color(-9118745));
        recipeList.setSelectionForeground(new Color(-16100280));
        recipeMainFrame.add(recipeList, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 2, 14, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        searchRecipeButton = new JButton();
        searchRecipeButton.setBackground(new Color(-9118745));
        Font searchRecipeButtonFont = this.$$$getFont$$$("Goudy Old Style", Font.BOLD, 26, searchRecipeButton.getFont());
        if (searchRecipeButtonFont != null) searchRecipeButton.setFont(searchRecipeButtonFont);
        searchRecipeButton.setForeground(new Color(-16100280));
        searchRecipeButton.setMargin(new Insets(5, 5, 5, 5));
        searchRecipeButton.setText("Search recipe");
        recipeMainFrame.add(searchRecipeButton, new com.intellij.uiDesigner.core.GridConstraints(2, 5, 1, 7, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        enterRecipe = new JTextField();
        enterRecipe.setBackground(new Color(-9118745));
        Font enterRecipeFont = this.$$$getFont$$$("Goudy Old Style", Font.BOLD, 26, enterRecipe.getFont());
        if (enterRecipeFont != null) enterRecipe.setFont(enterRecipeFont);
        enterRecipe.setForeground(new Color(-16100280));
        enterRecipe.setMargin(new Insets(2, 6, 2, 6));
        enterRecipe.setText("");
        recipeMainFrame.add(enterRecipe, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return recipeMainFrame;
    }

    ;

}
